module Contracts.FlightInProgress (
    FlightInProgress(..),
    MovementRequest(..)
) where

import DA.Exception (ActionThrow(throw))


import Contracts.AirTrafficControl (AirTrafficControl(..))
import Contracts.FlightSummary     (FlightSummary(..))

import Exceptions.NoNextPlaneRequest (NoNextPlaneRequest(..))

import States.AirfieldState (updateAirfieldState)
import States.PlaneState    (PlaneState(..))

import Types.Airfield.Location (Location(..))
import Types.Departure.Outcome (Outcome(..))
import Types.Plane.Objective   (Objective(..))
import Types.Plane.Request     (Request(..), nextRequest, trySatisfyingRequest)

import qualified DA.Optional as O (isSome, fromSome)


template FlightInProgress
    with
        captain : Party
        atc     : Party
        plane   : PlaneState
    where
        signatory captain
        observer atc
        choice SubmitMovementRequest : ContractId MovementRequest
            controller captain
            do case nextRequest plane of
                Some r -> create MovementRequest   with request = r; ..
                None   -> throw NoNextPlaneRequest with planeLocation = psLocation plane


template MovementRequest
    with
        captain : Party
        atc     : Party
        plane   : PlaneState
        request : Request
    where
        signatory captain
        observer atc
        choice ApproveMovementRequest : Either (ContractId FlightInProgress) (ContractId FlightSummary)
            controller atc
            do
                (atcContractId, atcContract) <- fetchByKey @AirTrafficControl atc
                let airfield         = airfieldState atcContract
                    maybeDestination = trySatisfyingRequest request plane airfield
                assert $ O.isSome maybeDestination

                let position         = psLocation plane
                    destination      = O.fromSome maybeDestination
                    maybeNewAirfield = updateAirfieldState airfield position destination
                assert $ O.isSome maybeNewAirfield

                archive atcContractId
                create AirTrafficControl
                    with
                        officer       = atc
                        airfieldState = O.fromSome maybeNewAirfield

                let summaryResponse = do
                        response <- create FlightSummary with outcome = Success; ..
                        return $ Right response
                    progressResponse = do
                        response <- create FlightInProgress with plane = plane {psLocation = destination}; ..
                        return $ Left response

                case (psObjective plane, destination) of
                    (Depart, Sky)      -> summaryResponse
                    (Depart, _)        -> progressResponse
                    (Arrive _, Gate _) -> summaryResponse
                    (Arrive _, _)      -> progressResponse
