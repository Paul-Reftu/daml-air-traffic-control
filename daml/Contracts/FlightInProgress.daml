module Contracts.FlightInProgress (
    FlightInProgress(..),
    MovementRequest(..)
) where

import DA.Action    (when)
import DA.Exception (ActionThrow(throw))


import Contracts.AirTrafficControl (AirTrafficControl(..))
import Contracts.FlightSummary     (FlightSummary(..))

import Exceptions.IllegalMovementRequest (IllegalMovementRequest(..))
import Exceptions.NoNextPlaneRequest     (NoNextPlaneRequest(..))

import States.AirfieldState (AirfieldState, updateAirfieldState)
import States.PlaneState    (PlaneState(..))

import Types.Airfield.Location (Location(..))
import Types.Departure.Outcome (Outcome(..))
import Types.Plane.Objective   (Objective(..))
import Types.Plane.Request     (Request(..), nextRequest, trySatisfyingRequest)

import qualified DA.Either   as E (isLeft, fromLeft, fromRight)
import qualified DA.Optional as O (isNone, fromSome)


template FlightInProgress
    with
        captain : Party
        atc     : Party
        plane   : PlaneState
    where
        signatory captain
        observer atc
        choice SubmitMovementRequest : ContractId MovementRequest
            controller captain
            do case nextRequest plane of
                Some r -> create MovementRequest   with request = r; ..
                None   -> throw NoNextPlaneRequest with planeLocation = psLocation plane


template MovementRequest
    with
        captain : Party
        atc     : Party
        plane   : PlaneState
        request : Request
    where
        signatory captain
        observer atc
        choice ProcessMovementRequest : (Either (ContractId FlightInProgress) (ContractId FlightSummary))
            controller atc
            do
                (atcContractId, atcContract) <- fetchByKey @AirTrafficControl atc

                let airfield                   = airfieldState atcContract
                    eitherExceptionDestination = trySatisfyingRequest request plane airfield
                when (E.isLeft eitherExceptionDestination) $
                    exercise self RejectMovementRequest with reason = E.fromLeft Unknown eitherExceptionDestination

                let position         = psLocation plane
                    destination      = E.fromRight Sky eitherExceptionDestination
                    maybeNewAirfield = updateAirfieldState airfield position destination
                when (O.isNone maybeNewAirfield) $
                    exercise self RejectMovementRequest with reason = ImpossibleTransition
                
                exercise self ApproveMovementRequest with newAirfield = O.fromSome maybeNewAirfield; ..
        

        choice RejectMovementRequest : ()
            with
                reason : IllegalMovementRequest
            controller atc
            do
                create RejectedMovementRequest with ..
                archive self
        

        choice ApproveMovementRequest : Either (ContractId FlightInProgress) (ContractId FlightSummary)
            with
                atcContractId : ContractId AirTrafficControl
                destination   : Location
                newAirfield   : AirfieldState
            controller atc
            do
                archive atcContractId
                create AirTrafficControl
                    with
                        officer       = atc
                        airfieldState = newAirfield

                let summaryResponse = do
                        response <- create FlightSummary with outcome = Success; ..
                        return $ Right response
                    progressResponse = do
                        response <- create FlightInProgress with plane = plane {psLocation = destination}; ..
                        return $ Left response

                case (psObjective plane, destination) of
                    (Depart, Sky)      -> summaryResponse
                    (Depart, _)        -> progressResponse
                    (Arrive _, Gate _) -> summaryResponse
                    (Arrive _, _)      -> progressResponse


template RejectedMovementRequest
    with
        atc     : Party
        captain : Party
        reason  : IllegalMovementRequest
    where
        signatory atc
        observer captain
