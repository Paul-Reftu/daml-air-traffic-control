{-| Unit tests for flight departures. -}

module Tests.Departures (
    test
) where

import Daml.Script

import States.PlaneState (PlaneState(..))

import Tests.Util (distGateToSky, submitFIPAndAssertFlightSuccess)

import Types.Airfield.Location (Location(..))
import Types.Ids               (GateId(..))
import Types.Plane.Objective   (Objective(..))

import qualified DA.Foldable as F (forA_)


planeG1, planeG2, planeG3, planeG4 : PlaneState
planeG1 = PlaneState (Gate $ GateId 1) Depart
planeG2 = PlaneState (Gate $ GateId 2) Depart
planeG3 = PlaneState (Gate $ GateId 3) Depart
planeG4 = PlaneState (Gate $ GateId 4) Depart


planesAtGates : [PlaneState]
planesAtGates = [planeG1, planeG2, planeG3, planeG4]


-- | Entry point.
test : Party -> Party -> Script ()
test cpt atc = script $ do
    testAnyNumberOfPlanesCanDepartConsecutivelyFromG1 cpt atc
    testAnyNumberOfPlanesCanDepartConsecutivelyFromAnyGate cpt atc


testAnyNumberOfPlanesCanDepartConsecutivelyFromG1 : Party -> Party -> Script ()
testAnyNumberOfPlanesCanDepartConsecutivelyFromG1 cpt atc = script $
    let noOfPlanes = 10
    in  F.forA_ [1..noOfPlanes] $ \_ ->
        submitFIPAndAssertFlightSuccess cpt atc distGateToSky planeG1


testAnyNumberOfPlanesCanDepartConsecutivelyFromAnyGate : Party -> Party -> Script ()
testAnyNumberOfPlanesCanDepartConsecutivelyFromAnyGate cpt atc = script $
    F.forA_ planesAtGates $ \plane ->
        submitFIPAndAssertFlightSuccess cpt atc distGateToSky plane
