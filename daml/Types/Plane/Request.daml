module Types.Plane.Request (
    Request(..),
    nextRequest,
    trySatisfyingRequest
) where

import DA.List      (head)


import Exceptions.IllegalMovementRequest (IllegalMovementRequest(..))

import States.AirfieldState (AirfieldState(..), isGateAvailable, getAvailableTaxiways, getAvailableRunways)
import States.PlaneState    (PlaneState(..))

import Types.Airfield.Location (Location(..))
import Types.Ids               (GateId, TaxiwayId, RunwayId)
import Types.Plane.Objective   (Objective(..))


data Request
    = RequestForGate GateId
    | RequestForTaxiway
    | RequestForRunway
    | RequestForTakeOff
    deriving (Eq, Show)


nextRequest : PlaneState -> Optional Request
nextRequest ps = case (psLocation ps, psObjective ps) of
    -- DEPARTURES
    (Gate _, Depart)    -> Some RequestForTaxiway
    (Taxiway _, Depart) -> Some RequestForRunway
    (Runway _, Depart)  -> Some RequestForTakeOff
    (Sky, Depart)       -> None

    -- ARRIVALS
    (Sky, Arrive _)       -> Some RequestForRunway
    (Runway _, Arrive _)  -> Some RequestForTaxiway
    (Taxiway _, Arrive j) -> Some $ RequestForGate j
    (Gate _, Arrive _)    -> None


trySatisfyingRequest : Request -> PlaneState -> AirfieldState -> Either IllegalMovementRequest Location
trySatisfyingRequest request plane airfield = case (psLocation plane, psObjective plane, request) of
    -- DEPARTURES
    (Gate _, Depart, RequestForTaxiway)   -> firstAvailableTaxiway
    (Taxiway _, Depart, RequestForRunway) -> firstAvailableRunway
    (Runway _, Depart, RequestForTakeOff) -> Right Sky
    
    -- ARRIVALS
    (Sky, Arrive _, RequestForRunway)       -> firstAvailableRunway
    (Runway _, Arrive _, RequestForTaxiway) -> firstAvailableTaxiway
    (Taxiway _, Arrive i, RequestForGate j) ->
        if i /= j then Left ImpossibleTransition
        else if not (isGateAvailable i airfield) then Left GateOccupied
        else Right $ Gate i
    
    _ -> Left ImpossibleTransition
    where
        availableTaxiways : [TaxiwayId]
        availableTaxiways = getAvailableTaxiways airfield

        availableRunways : [RunwayId]
        availableRunways  = getAvailableRunways  airfield

        firstAvailableTaxiway : Either IllegalMovementRequest Location
        firstAvailableTaxiway =
            if null availableTaxiways then Left NoTaxiwaysAvailable
            else Right $ Taxiway $ head availableTaxiways
        
        firstAvailableRunway : Either IllegalMovementRequest Location
        firstAvailableRunway =
            if null availableRunways then Left NoRunwaysAvailable
            else Right $ Runway $ head availableRunways
